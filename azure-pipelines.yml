# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- dev
- netstandard

variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    MyRunNumber: '5.0.0'
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    MyRunNumber: '5.0.0-alpha-$(Build.BuildNumber)'
  ${{ if eq(variables['Build.SourceBranchName'], 'netstandard') }}:
    MyRunNumber: '5.0.0-alpha-$(Build.BuildNumber)'

stages:
#- stage: Test

#  jobs:
#  - job: Test
#    pool:
#      vmImage: 'ubuntu-latest'
#    steps:
#    - task: UseDotNet@2
#      inputs:
#        packageType: 'sdk'
#        version: '5.0.100'

#    - task: DotNetCoreCLI@2
#      displayName: 'dotnet restore'
#      inputs:
#        command: 'restore'
#        projects: '**/*.sln'
#        feedsToUse: 'config'
#        nugetConfigPath: 'nuget.config'
#        externalFeedCredentials: 'Arragro Nuget'

#    - task: DotNetCoreCLI@2
#      displayName: 'dotnet test'
#      inputs:
#        command: test
#        projects: |
#         **/ArragroCMS.IntegrationTests/*.csproj
#         **/ArragroCMS.Management.IntegrationTests/*.csproj

- stage: Build_and_Deploy 
  jobs:
  - job: Build_and_Deploy
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '5.0.201'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '**/*.sln'
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'
        externalFeedCredentials: 'Arragro Nuget'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $paths = @(
	        ".\src\Arragro.ObjectHistory.Web",
	        ".\src\Arragro.ObjectHistory.Client"
          )
      
          function executeSomething {
              param($something)
              $something
              if($LASTEXITCODE -ne 0)
              {
                  exit
              }
          }
      
          foreach ($path in $paths) {
              dotnet pack $path -c Release /p:Version=$(MyRunNumber) -o $(Build.ArtifactStagingDirectory)
              $projectName = $path.Replace(".\src\", "").Replace(".\providers\", "")
          }
      displayName: 'dotnet pack'

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet push'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;!$(Build.ArtifactStagingDirectory)/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '18f19931-9e05-406a-8378-32b0620b4f22'
        publishPackageMetadata: false
